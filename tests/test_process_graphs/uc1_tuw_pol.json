{
  "gencol1": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          [
            [0.5, 0.5],
            [0.5, 0.15]
          ],
          [
            [0.5, 0.5],
            [0.15, null]
          ]
        ]
      ],
      "dims": ["y", "x", "t", "band"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "t": ["2017-03-01 11:00:12", "2017-03-03 11:00:12"],
        "band": [["VV", null, null], ["VH", null, null]]
      }
    },
    "description": "Loading (testing) Sentinel 1 data for VV and VH over Vienna in March 2017"
  },



  "reducedimension1": {
    "process_id": "reduce_dimension",
    "arguments": {
      "data": {
        "from_node": "gencol1"
      },
      "dimension": "t",
      "reducer": {
        "process_graph": {
          "mean1": {
            "process_id": "mean",
            "arguments": {
              "data": {
                "from_parameter": "data"
              }
            },
            "result": true
          }
        }
      }
    },
    "description": "Calculating the mean over the whole time stack, resulting in one image of mean values for VV and VH."
  },
  "expectedreducedimension1": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          [0.5, 0.325],
          [0.325, 0.5]
        ]
      ],
      "dims": ["y", "x", "band"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "band": [["VV", null, null], ["VH", null, null]]
      }
    }
  },
  "assertreducedimension1": {
    "process_id": "assert_equals",
    "arguments": {
      "a": {
        "from_node": "reducedimension1"
      },
      "b": {
        "from_node": "expectedreducedimension1"
      }
    }
  },



  "filterbands1": {
    "process_id": "filter_bands",
    "arguments": {
      "bands": [
        "VV"
      ],
      "data": {
        "from_node": "reducedimension1"
      }
    },
    "description": "Selecting only the VV image"
  },
  "expectedfilterbands1": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          [0.5],
          [0.325]
        ]
      ],
      "dims": ["y", "x", "band"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "band": [["VV", null, null]]
      }
    }
  },
  "assertfilterbands1": {
    "process_id": "assert_equals",
    "arguments": {
      "a": {
        "from_node": "filterbands1"
      },
      "b": {
        "from_node": "expectedfilterbands1"
      }
    }
  },



  "filterbands2": {
    "process_id": "filter_bands",
    "arguments": {
      "bands": [
        "VH"
      ],
      "data": {
        "from_node": "reducedimension1"
      }
    },
    "description": "Selecting only the VH image"
  },
  "expectedfilterbands2": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          [0.325],
          [0.5]
        ]
      ],
      "dims": ["y", "x", "band"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "band": [["VH", null, null]]
      }
    }
  },
  "assertfilterbands2": {
    "process_id": "assert_equals",
    "arguments": {
      "a": {
        "from_node": "filterbands2"
      },
      "b": {
        "from_node": "expectedfilterbands2"
      }
    }
  },




  "reducedimension2": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          -0.175,
          0.175
        ]
      ],
      "dims": ["y", "x"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3]
      }
    },
    "description": "SKIP STEP FOR NOW: Calculate the difference between VH and VV resulting in one image of the difference without a bands dimension"
  },



  "renamelabels1": {
    "process_id": "rename_labels",
    "arguments": {
      "data": {
        "from_node": "filterbands1"
      },
      "dimension": "band",
      "source": ["VV"],
      "target": ["R"]
    },
    "description": "Rename VV band label to R"
  },
  "expectedrenamelabels1": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          [0.5],
          [0.325]
        ]
      ],
      "dims": ["y", "x", "band"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "band": [["R", null, null]]
      }
    }
  },
  "assertrenamelabels1": {
    "process_id": "assert_equals",
    "arguments": {
      "a": {
        "from_node": "renamelabels1"
      },
      "b": {
        "from_node": "expectedrenamelabels1"
      }
    }
  },

  "renamelabels2": {
    "process_id": "rename_labels",
    "arguments": {
      "data": {
        "from_node": "filterbands2"
      },
      "dimension": "band",
      "source": ["VH"],
      "target": ["G"]
    },
    "description": "Rename VH band label to G"
  },
  "expectedrenamelabels2": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          [0.325],
          [0.5]
        ]
      ],
      "dims": ["y", "x", "band"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "band": [["G", null, null]]
      }
    }
  },
  "assertrenamelabels2": {
    "process_id": "assert_equals",
    "arguments": {
      "a": {
        "from_node": "renamelabels2"
      },
      "b": {
        "from_node": "expectedrenamelabels2"
      }
    }
  },


  "adddimension1": {
    "process_id": "add_dimension",
    "arguments": {
      "data": {
        "from_node": "reducedimension2"
      },
      "label": "B",
      "name": "band",
      "type": "bands"
    },
    "description": "Add previously reduced bands dimension with the band label B"
  },
  "expectedadddimension1": {
    "process_id": "create_cube",
    "arguments": {
      "data": [[
        [
          -0.175,
          0.175
        ]
      ]],
      "dims": ["band", "y", "x"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "band": [["B", null, null]]
      }
    }
  },
  "assertadddimension1": {
    "process_id": "assert_equals",
    "arguments": {
      "a": {
        "from_node": "adddimension1"
      },
      "b": {
        "from_node": "expectedadddimension1"
      }
    }
  },



  "mergecubes1": {
    "process_id": "merge_cubes",
    "arguments": {
      "cube1": {
        "from_node": "renamelabels1"
      },
      "cube2": {
        "from_node": "renamelabels2"
      }
    },
    "description": "Merging R and G datacubes to one with both images having the band labels R and G"
  },
  "expectedmergecubes1": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          [0.325, 0.5],
          [0.5, 0.325]
        ]
      ],
      "dims": ["y", "x", "band"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "band": [["G", null, null], ["R", null, null]]
      }
    }
  },
  "assertmergecubes1": {
    "process_id": "assert_equals",
    "arguments": {
      "a": {
        "from_node": "mergecubes1"
      },
      "b": {
        "from_node": "expectedmergecubes1"
      }
    }
  },


  "mergecubes2": {
    "process_id": "merge_cubes",
    "arguments": {
      "cube1": {
        "from_node": "mergecubes1"
      },
      "cube2": {
        "from_node": "adddimension1"
      }
    },
    "description": "Merging RG and B datacubes to one with all three images having the band labels R, G and B"
  },
  "expectedmergecubes2": {
    "process_id": "create_cube",
    "arguments": {
      "data": [
        [
          [0.325, 0.5, -0.175],
          [0.5, 0.325, 0.175]
        ]
      ],
      "dims": ["y", "x", "band"],
      "coords": {
        "y": [16.3],
        "x": [48.2, 48.3],
        "band": [["G", null, null], ["R", null, null], ["B", null, null]]
      }
    }
  },
  "assertmergecubes2": {
    "process_id": "assert_equals",
    "arguments": {
      "a": {
        "from_node": "mergecubes2"
      },
      "b": {
        "from_node": "expectedmergecubes2"
      }
    }
  },


  "saveresult1": {
    "process_id": "save_result",
    "arguments": {
      "data": {
        "from_node": "reducedimension1"
      },
      "format": "gtiff",
      "options": {
        "datatype": "float32"
      }
    },
    "description": "Save the resulting datacube as GeoTiff",
    "result": true
  }
}
